#version 450
layout(local_size_x = 128) in;

#if defined(SCALED)
layout(set = 0, binding = 0, rgba8) uniform image2D uFramebuffer;
#elif defined(UNSCALED)
layout(set = 0, binding = 0, r32ui) uniform uimage2D uFramebuffer;
#else
#error "Invalid defines."
#endif

layout(std430, push_constant) uniform Registers
{
   ivec2 src;
   ivec2 dst;
   ivec2 extent;
   int scaling;
} registers;

void main()
{
   int src_x = registers.src.x + int(gl_LocalInvocationID.x);
   int dst_x = registers.dst.x + int(gl_LocalInvocationID.x);
   ivec2 offset = ivec2(gl_WorkGroupID.xy);
   for (int y = 0; y < registers.extent.y; y++)
   {
      for (int x = 0; x < registers.extent.x; x += 128)
      {
         // Make sure we load data into our "cache" before starting the write back.
#ifdef SCALED
#define DECL_CACHE vec4 cache
#define DECL_MASK_CACHE vec4 mask_cache
#define LOAD_SWIZZLE rgba
#define STORE_CACHE cache
#define TEST_CACHE(v) ((v).a < 0.5)
#else
#define DECL_CACHE uint cache
#define DECL_MASK_CACHE uint mask_cache
#define LOAD_SWIZZLE r
#define STORE_CACHE uvec4(cache)
#define TEST_CACHE(v) ((v) < 0x8000u)
#endif

         // This way isn't great for cache, but we can run scaling * scaling independent workgroups as pixels
         // within macro-blocks are completely independent.

         DECL_CACHE;
         if (x + int(gl_LocalInvocationID.x) < registers.extent.x)
         {
            ivec2 coord = registers.scaling * ivec2(src_x + x, registers.src.y + y) + offset;
            cache = imageLoad(uFramebuffer, coord).LOAD_SWIZZLE;
         }

         // Write-after-read hazard, just execution barrier here.
         barrier();

         if (x + int(gl_LocalInvocationID.x) < registers.extent.x)
         {
            ivec2 coord = registers.scaling * ivec2(dst_x + x, registers.dst.y + y) + offset;
#ifdef MASKED
            DECL_MASK_CACHE;
            mask_cache = imageLoad(uFramebuffer, coord).LOAD_SWIZZLE;
            if (TEST_CACHE(mask_cache))
               imageStore(uFramebuffer, coord, STORE_CACHE);
#else
            imageStore(uFramebuffer, coord, STORE_CACHE);
#endif
         }

         memoryBarrierImage();
         barrier();
      }
   }
}


#version 310 es
layout(local_size_x = 8, local_size_y = 8) in;

#include "common.h"

#if defined(SCALED)
layout(set = 0, binding = 0) uniform sampler2D uFramebuffer;
#else
layout(set = 0, binding = 0) uniform highp usampler2D uFramebuffer;
#endif
layout(set = 1, binding = 0, rgba8) uniform writeonly mediump image2DArray uImage;

struct BlitInfo
{
    uint base;
    uint palbase;
    uint window;
    uint layer;
};

layout(set = 1, binding = 1, std140) uniform BlitInfos
{
    BlitInfo infos[256];
};

layout(std430, push_constant) uniform PushMe
{
    uint scale;
} registers;


uvec2 apply_window(uvec2 coord)
{
    uvec4 masks = unpack4x8(infos[gl_WorkGroupID.z].window);
#if 0
#if defined(SCALED)
    masks.xy = (masks.xy << registers.scale) | ((1u << registers.scale) - 1u);
    masks.zw <<= registers.scale;
#endif
    return (coord.xy & masks.xy) + masks.zw;
#endif
    // Temporary hack while I figure out how to best solve texturing ...
    return coord.xy + masks.zw;
}

void main()
{
#if defined(SCALED)
    uvec2 coord = unpack2x16(infos[gl_WorkGroupID.z].base) + apply_window(gl_GlobalInvocationID.xy);
    vec4 color = texelFetch(uFramebuffer, ivec2(coord), 0);
    color.a = round(color.a);
#elif defined(UNSCALED)
    uvec2 coord = unpack2x16(infos[gl_WorkGroupID.z].base) + apply_window(gl_GlobalInvocationID.xy);
    uint rgba = texelFetch(uFramebuffer, ivec2(coord), 0).x;
    vec4 color = abgr1555(rgba);
#elif defined(PAL4)
    uvec2 coord = unpack2x16(infos[gl_WorkGroupID.z].base);
    uvec2 subcoord = apply_window(gl_GlobalInvocationID.xy);
    uint shift = 4u * (subcoord.x & 3u);
    subcoord.x >>= 2u;
    coord += subcoord;
    uint index = texelFetch(uFramebuffer, ivec2(coord), 0).x;
    index = (index >> shift) & 0xfu;
    uvec2 palcoord = unpack2x16(infos[gl_WorkGroupID.z].palbase);
    palcoord.x += index;
    uint rgba = texelFetch(uFramebuffer, ivec2(palcoord), 0).x;
    vec4 color = abgr1555(rgba);
#elif defined(PAL8)
    uvec2 coord = unpack2x16(infos[gl_WorkGroupID.z].base);
    uvec2 subcoord = apply_window(gl_GlobalInvocationID.xy);
    uint shift = 8u * (subcoord.x & 1u);
    subcoord.x >>= 1u;
    coord += subcoord;
    uint index = texelFetch(uFramebuffer, ivec2(coord), 0).x;
    index = (index >> shift) & 0xffu;
    uvec2 palcoord = unpack2x16(infos[gl_WorkGroupID.z].palbase);
    palcoord.x += index;
    uint rgba = texelFetch(uFramebuffer, ivec2(palcoord), 0).x;
    vec4 color = abgr1555(rgba);
#else
#error "Invalid defines."
#endif

    imageStore(uImage, ivec3(gl_GlobalInvocationID.xy, int(infos[gl_WorkGroupID.z].layer)), color);
}
